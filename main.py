import telebot
from telebot import types
import pymorphy2
from PIL import Image, ImageDraw
import sqlite3
from translate import Translator
import passss
import json
import requests
import pole
import mani
import smtplib
from youtube_search import YoutubeSearch
from googlesearch import search

REPL = ""
bot = telebot.TeleBot("6392696125:AAHyu5ymG-OzjOcX_XbLnqNfe8Mwc762A9k")  # yeap
API = 'f2d22ddb2ceebe30809c690d48af0e56'
NAME = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
        'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
        'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',
        'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '1', '2', '3',
        '4', '5', '6', '7', '8', '9', '0']
PASSWORD = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
            'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
            'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
            'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',
            'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '1', '2', '3',
            '4', '5', '6', '7', '8', '9', '0', '!', '@', '#', '$',
            '%', '^', '&', '*', '_']
with open(REPL + 'hesh.txt', 'r') as file:
    qq = str(file.read().split(' '))
    hesh = {}
    for i in range(0, len(qq) // 2):
        hesh[qq[i * 2]] = qq[i * 2 + 1]


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–ø–∏—à–∏—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–µ—Å')


@bot.message_handler(commands=['help'])
def all_messages(message):
    bot.send_message(message.from_user.id, "–í–æ—Ç –≤–∞–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –±–æ—Ç \n "
                                           "/start - –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º \n /help - –£–∑–Ω–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ \n "
                                           "/weather - –£–∑–Ω–∞–π—Ç–µ –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ \n "
                                           "/registration - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏ –æ–Ω–ª–∞–π–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω—É–∂–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ \n"
                                           "/google - –í—ã–≤–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ \n"
                                           "/video - –í—ã–≤–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ –∏–∑ YouTube \n"
                                           "/game - –ù–∞–ø–∏—à–∏—Ç–µ –∏ –∏–≥—Ä–∞–π—Ç–µ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!")


@bot.message_handler(commands=['close'])
def all_messages(message):
    sq = types.ReplyKeyboardRemove()
    bot.send_message(message.from_user.id, "Done with Keyboard", reply_markup=sq)


@bot.message_handler(commands=['game'])
def game(message):
    global mesid
    with open(REPL + 'game_lobby.txt', 'r') as file:
        s = file.read().split(',')
        print(s)
        toft = ','.join(s)
    qua = s[-1].split('.')
    id = str(message.from_user.id)
    print(message, "MESSAGE")
    print(toft)
    ro = False
    if id not in toft:
        if len(qua) == 5:
            game_lobby = ",".join(s) + ',' + id
            with open(REPL + 'game_lobby.txt', 'w') as file:
                file.write(game_lobby)
        elif len(qua) == 1 and qua[-1] != "":
            mesid = bot.send_message(message.chat.id, "–û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞")
            mesid = str(mesid.id)
            print(mesid, "MESID")
            game_lobby = ','.join(s) + '.' + id + '.' + "1" + '.' + "?/?/?/?/?/?/?/?/?" + "." + mesid  # –∏–∑–º–µ–Ω–∏—Ç—å
            with open(REPL + 'game_lobby.txt', 'w') as file:
                file.write(game_lobby)
            print(mesid)
            print("AOAOIFDOIAOFIOAI")
            play(message)
        else:
            game_lobby = id
            with open(REPL + 'game_lobby.txt', 'w') as file:
                file.write(game_lobby)
    elif id in toft:
        for i in s:
            print(i)
            if (id in s) and int(i.split(".")[2]) > 1:
                ro = True
        if ro:
            bot.register_next_step_handler(message, play)
        else:
            bot.send_message(message.chat.id, f"–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏, –æ–∂–∏–¥–∞–π—Ç–µ")


def play(message):
    print(1)
    with open(REPL + 'game_lobby.txt', 'r') as file:
        s = file.read().split(',')
    for i in s:
        print(i.split('.'))
        player1, player2, round_number, bo, mao = i.split('.')
        markup = types.InlineKeyboardMarkup()
        emoji = []
        for i in bo.split("/"):
            if i == "?":
                emoji.append("‚ùì")
            elif i == "x":
                emoji.append("‚ùå")
            elif i == "o":
                emoji.append("üÖæÔ∏è")
        btn1 = types.InlineKeyboardButton(f'{emoji[0]}', callback_data='left_top')
        btn2 = types.InlineKeyboardButton(f'{emoji[1]}', callback_data='mid_top')
        btn3 = types.InlineKeyboardButton(f'{emoji[2]}', callback_data='right_top')
        btn4 = types.InlineKeyboardButton(f'{emoji[3]}', callback_data='left_mid')
        btn5 = types.InlineKeyboardButton(f'{emoji[4]}', callback_data='mid_mid')
        btn6 = types.InlineKeyboardButton(f'{emoji[5]}', callback_data='right_mid')
        btn7 = types.InlineKeyboardButton(f'{emoji[6]}', callback_data='left_bot')
        btn8 = types.InlineKeyboardButton(f'{emoji[7]}', callback_data='mid_bot')
        btn9 = types.InlineKeyboardButton(f'{emoji[8]}', callback_data='right_bot')
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9)
        round_number = int(round_number)
        pole.board(bo)
        if round_number % 2 == 1:
            image = 'res.png'
            file = open('img/' + image, 'rb')
            bot.send_photo(int(player1), file)
            if round_number == 1:
                bot.send_message(int(player1), "–í—ã - –∫—Ä–µ—Å—Ç–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ö–æ–¥–∞.", reply_markup=markup)
            else:
                bot.send_message(int(player1), "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ö–æ–¥–∞.", reply_markup=markup)
        if round_number % 2 == 0:
            image = 'res.png'
            file = open('img/' + image, 'rb')
            bot.send_photo(int(player2), file)
            if round_number == 2:
                bot.send_message(int(player2), "–í—ã - –Ω–æ–ª–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ö–æ–¥–∞.", reply_markup=markup)
            else:
                bot.send_message(int(player2), "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ö–æ–¥–∞.", reply_markup=markup)
        # mesid += 2


@bot.callback_query_handler(func=lambda callback: True)
def callback_mes(callback):
    print(2)
    t = 0
    if callback.data == 'left_top':
        t = 1
    elif callback.data == 'mid_top':
        t = 2
    elif callback.data == 'right_top':
        t = 3
    elif callback.data == 'left_mid':
        t = 4
    elif callback.data == 'mid_mid':
        t = 5
    elif callback.data == 'right_mid':
        t = 6
    elif callback.data == 'left_bot':
        t = 7
    elif callback.data == 'mid_bot':
        t = 8
    elif callback.data == 'right_bot':
        t = 9
    print(callback.message.chat.id)
    move = str(callback.message.chat.id)
    count = 0
    with open(REPL + 'game_lobby.txt', 'r') as file:
        s = file.read().split(',')
    for i in s:
        count += 1
        print(s)
        if move in i:
            print(move)
            li = i.split(".")
            print(li)
            pol = ""
            wait = ""
            pol = li[3].split("/")
            if pol[t - 1] == "?":
                if li[0] == move and int(li[2]) % 2 == 1:
                    pol[t - 1] = "x"
                    pol = "/".join(pol)
                    wait = li[1]
                elif li[1] == move and int(li[2]) % 2 == 0:
                    pol[t - 1] = "o"
                    pol = "/".join(pol)
                    wait = li[0]
                bot.delete_message(int(move), int(li[4]) + 1)  # 74 # 77 #81
                bot.delete_message(int(move), int(li[4]) + 2)  # 75 # 78 # 82
                if int(li[2]) == 1:
                    bot.delete_message(int(wait), int(li[4]))  # 73
                    # li[4] = str(int(li[4]) + 1) # 76
                elif int(li[2]) != 1:
                    bot.delete_message(int(wait), int(li[4]))  # 76
                    bot.delete_message(int(move), int(li[4]) + 3)  # 79
                    # li[4] = str(int(li[4]) + 2)
                if (pol[0] == "o" and pol[2] == "o" and pol[4] == "o" or
                        pol[6] == "o" and pol[8] == "o" and pol[10] == "o" or
                        pol[12] == "o" and pol[14] == "o" and pol[16] == "o" or
                        pol[0] == "o" and pol[6] == "o" and pol[12] == "o" or
                        pol[2] == "o" and pol[8] == "o" and pol[14] == "o" or
                        pol[4] == "o" and pol[10] == "o" and pol[16] == "o" or
                        pol[0] == "o" and pol[8] == "o" and pol[16] == "o" or
                        pol[12] == "o" and pol[8] == "o" and pol[4] == "o"):
                    s.remove(i)
                    bot.send_message(int(wait), "–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ –æ")
                    bot.send_message(int(move), "–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ –æ")
                elif (pol[0] == "x" and pol[2] == "x" and pol[4] == "x" or
                      pol[6] == "x" and pol[8] == "x" and pol[10] == "x" or
                      pol[12] == "x" and pol[14] == "x" and pol[16] == "x" or
                      pol[0] == "x" and pol[6] == "x" and pol[12] == "x" or
                      pol[2] == "x" and pol[8] == "x" and pol[14] == "x" or
                      pol[4] == "x" and pol[10] == "x" and pol[16] == "x" or
                      pol[0] == "x" and pol[8] == "x" and pol[16] == "x" or
                      pol[12] == "x" and pol[8] == "x" and pol[4] == "x"):
                    print(s[0], i)
                    print(s[0] == i)
                    s.remove(i)
                    game_lobby = ','.join(s)
                    with open(REPL + 'game_lobby.txt', 'w') as file:
                        file.write(game_lobby)
                    bot.send_message(int(wait), "–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ x")
                    bot.send_message(int(move), "–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ x")
                else:
                    qu = bot.send_message(int(move), "–í–∞—à —Ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞")
                    mesid = qu.id
                    bot.send_message(int(wait), "–°–æ–ø–µ—Ä–Ω–∏–∫ —Å–¥–µ–ª–∞–ª —Ö–æ–¥")
                    timered = [li[0], li[1], str(int(li[2]) + 1), pol, str(mesid)]  # 76 # 80
                    r = '.'.join(timered)
                    s[count - 1] = r
                    game_lobby = ','.join(s)
                    with open(REPL + 'game_lobby.txt', 'w') as file:
                        file.write(game_lobby)
                    play(int(wait))
                # bot.edit_message_text('Edit text', callback.message.chat.id, callback.message.message_id)
            else:
                if li[0] == move:
                    wait = li[1]
                elif li[1] == move:
                    wait = li[0]
                bot.send_message(int(wait), "–í–∞—à —Ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞")
                qu = bot.send_message(int(move), "–≠—Ç–æ –ø–æ–ª–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –ø–æ–ª–µ.")
                mesid = qu.id - 1
                bot.delete_message(int(wait), int(li[4]))  # 80
                bot.delete_message(int(move), int(li[4]) + 1)  # 80
                bot.delete_message(int(move), int(li[4]) + 2)  # 75 # 81
                bot.delete_message(int(move), int(li[4]) + 3)  # 75 # 82
                pol = "/".join(pol)
                timered = [li[0], li[1], str(int(li[2])), pol, str(mesid)]
                print(str(int(li[2])))
                r = '.'.join(timered)
                s[count - 1] = r
                game_lobby = ','.join(s)
                with open(REPL + 'game_lobby.txt', 'w') as file:
                    file.write(game_lobby)
                play(int(move))


@bot.message_handler(commands=['google'])
def google(message):
    query = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å")
    bot.register_next_step_handler(query, tests_google)


def tests_google(message):
    name = message.text.strip()
    for i in search(name, tld='co.in', lang='russian', stop=3):
        bot.send_message(message.chat.id, i)


@bot.message_handler(commands=['video'])
def video(message):
    query = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å")
    bot.register_next_step_handler(query, tests_video)


def tests_video(message):
    print(message)
    name = message.text.strip()
    print(name)
    results = YoutubeSearch(name).to_dict()
    print(results)
    for i in range(3):
        bot.send_message(message.chat.id, f"https://www.youtube.com{results[i]['url_suffix']}")


@bot.message_handler(commands=['site', 'website'])
def site(message):
    print(6)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('Vk', url='https://vk.com/lanfrod'))
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, –≤–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞', reply_markup=markup)


@bot.message_handler(commands=['login'])
def login(message):
    print(message.text.lower())
    print(message)
    conn = sqlite3.connect(REPL + "users.db")
    cur = conn.cursor()
    sos2 = cur.execute('''SELECT * FROM userinfo WHERE tg_id = ?''', (message.from_user.id,)).fetchone()
    if message.text.lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" or message.text.lower() == '/registration':
        if sos2:
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
            bot.clear_step_handler(message)
        else:
            bot.send_message(message.chat.id, f'{message.from_user.username.capitalize()}, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'
                                              f' –Ω–∞–ø–∏—à–∏ –∂–µ–ª–∞–µ–º—ã–π login. –û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ –Ω–∏–∫–Ω–µ–π–º. –ù–∏–∫ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å '
                                              f'–∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞, —Ü–∏—Ñ—Ä')
            bot.register_next_step_handler(message, user_name)
    else:
        get_weather(message)


@bot.message_handler(commands=['registration'])
def registration(message):
    print(message.text.lower())
    print(message)
    conn = sqlite3.connect(REPL + "users.db")
    cur = conn.cursor()
    sos2 = cur.execute('''SELECT * FROM userinfo WHERE tg_id = ?''', (message.from_user.id,)).fetchone()
    if message.text.lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" or message.text.lower() == '/registration':
        if sos2:
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
            bot.clear_step_handler(message)
        else:
            bot.send_message(message.chat.id, f'{message.from_user.username.capitalize()}, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'
                                              f' –Ω–∞–ø–∏—à–∏ –∂–µ–ª–∞–µ–º—ã–π login. –û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ –Ω–∏–∫–Ω–µ–π–º. –ù–∏–∫ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å '
                                              f'–∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞, —Ü–∏—Ñ—Ä')
            bot.register_next_step_handler(message, user_name)
    else:
        get_weather(message)


def user_name(message):
    conn = sqlite3.connect(REPL + 'users.db')
    cur = conn.cursor()
    proxod = True
    global name
    name = message.text.strip()
    for i in name:
        if i not in NAME:
            proxod = False
    if proxod:
        proverb = cur.execute('''SELECT * FROM passwords WHERE login = ?''', (name,)).fetchall()
        print(proverb)
        conn.close()
        if not proverb:
            bot.send_message(message.chat.id,
                             '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å. –û–Ω –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞, —Ü–∏—Ñ—Ä '
                             '—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–∏–∂–Ω–µ–≥–æ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.')
            bot.register_next_step_handler(message, user_pass)
        else:
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω')
            bot.register_next_step_handler(message, user_name)
    else:
        bot.send_message(message.chat.id, '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω')
        bot.register_next_step_handler(message, user_name)


def user_pass(message):
    global password
    global hesh_password
    b = True
    password = message.text.strip()
    for i in password:
        if i not in PASSWORD:
            b = False
    if b:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏')
        with open(REPL + 'hesh.txt', 'r') as file:
            k = file.read().split(" ")
            heshing = {}
            for i in range(len(k) // 2):
                heshing[k[i * 2]] = k[i * 2 + 1]
            hesh_password = ""
            for i in password:
                hesh_password += heshing[i]
        bot.register_next_step_handler(message, user_email)
    else:
        bot.send_message(message.chat.id, '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–∞—Ä–æ–ª—å. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å')
        bot.register_next_step_handler(message, user_pass)


def user_email(message):
    global email
    email = message.text.strip()
    nickname = message.from_user.first_name
    tgid = message.from_user.id
    conn = sqlite3.connect(REPL + 'users.db')
    cur = conn.cursor()
    try:
        sos1 = cur.execute('''SELECT * FROM userinfo WHERE email = ?''', (email,)).fetchall()
        if sos1:
            print(sos1)
            raise Exception()
        mani.send_email(email, 'Registration',
                        f'{nickname}, —ç—Ç–æ –∫–∞–ø—á–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞–ø—á–∏'
                        f' –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º')

        up = mani.pat()
        res = ''  # –∫–∞–ø—á–∞ –¥–ª–∏–Ω–Ω–∞—è(–Ω–∞—Å–ª–∞–∏–≤–∞–µ—Ç—Å—è –≤–µ—Ä–æ—è—Ç–Ω–æ), —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã/–≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–µ–π—Å—Ç–≤–∏—è
        for i in up:
            res += i
        print(res)
        cur.execute('''INSERT INTO captchatab (nickname, captcha) VALUES (?, ?)''', (tgid, res,))
        bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞–ø—á–∏')
        conn.commit()
        conn.close()
        bot.register_next_step_handler(message, cap)
        print(1)
    except Exception:  # –æ—à–∏–±–∫–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ—á—Ç–æ–π
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—á—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É –µ—â—ë —Ä–∞–∑')
        bot.register_next_step_handler(message, user_email)
        print(3)
    except smtplib.SMTPRecipientsRefused:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—á—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É –µ—â—ë —Ä–∞–∑')
        bot.register_next_step_handler(message, user_email)
        print(2)



def cap(message):
    global mistake
    captcha = message.text.strip()
    num = message.message_id
    if captcha != mani.pat():
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞–ø—á–∏')
        bot.register_next_step_handler(message, cap)
        nickname = message.from_user.first_name
        tgid = message.from_user.id
        conn = sqlite3.connect(REPL + 'users.db')
        cur = conn.cursor()
        mani.send_email(email, 'Registration',
                        f'{nickname}, —ç—Ç–æ –∫–∞–ø—á–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞–ø—á–∏'
                        f' –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º')
        up = mani.pat()
        res = ''  # –∫–∞–ø—á–∞ –¥–ª–∏–Ω–Ω–∞—è(–Ω–∞—Å–ª–∞–∏–≤–∞–µ—Ç—Å—è –≤–µ—Ä–æ—è—Ç–Ω–æ), —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã/–≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–µ–π—Å—Ç–≤–∏—è
        for i in up:
            res += i
        print(res)
        cur.execute('''INSERT INTO captchatab (nickname, captcha) VALUES (?, ?)''', (tgid, res,))
        bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –Ω–æ–≤–æ–π –∫–∞–ø—á–∏')
    elif captcha == mani.pat():
        bot.send_message(message.chat.id, '–ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
        conn = sqlite3.connect(REPL + 'users.db')
        cur = conn.cursor()
        nickname = message.from_user.first_name
        tg_id = message.from_user.id
        print(nickname)
        cur.execute("INSERT INTO passwords (login, pass) VALUES ('%s', '%s')" % (name, hesh_password))
        cur.execute("INSERT INTO userinfo (login, email, nickname, tg_id) VALUES ('%s', '%s', '%s', '%s')" % (
        name, email, nickname, tg_id))
        conn.commit()
        conn.close()
        markup = telebot.types.InlineKeyboardMarkup()
        bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', reply_markup=markup)


@bot.message_handler(commands=['weather'])
def get_weather(message):
    city = message.text.strip().lower()
    morph = pymorphy2.MorphAnalyzer()
    city_parse = morph.parse(city)[0].inflect({"loct"}).word
    s = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API}&units=metric')
    if s.status_code == 200:
        data = json.loads(s.text)
        print(city)
        print(data)
        if data["weather"][0]["description"] == "weather condition":
            word1 = "–º–∞–ª–æ –æ–±–ª–∞–∫–æ–≤"
            print(word1)
        elif data["weather"][0]["description"] == "overcast clouds":
            word1 = "–ø–∞—Å–º—É—Ä–Ω—ã–µ –æ–±–ª–∞–∫–∞"
        else:
            word1 = Translator(from_lang="english", to_lang="russian").translate(data["weather"][0]["description"])
        # s2 = morph.parse(word1)[1].inflect({"ADJF"}).inflect({"femn"})
        # print(morph.parse(word1)[1])
        bot.reply_to(message, f'–°–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞ –≤ {city_parse.capitalize()}: {word1.lower()}. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞:'
                              f' {data["main"]["temp"]}¬∞C')
        if word1.lower() == "—è—Å–Ω–æ":
            image = REPL + 'img/sunny3.png'
        elif word1.lower() == "–º–∞–ª–æ –æ–±–ª–∞–∫–æ–≤":
            image = REPL + 'img/obla.png'
        elif word1.lower() == "–æ–±–ª–∞—á–Ω–æ":
            image = REPL + 'img/obl.png'
        elif word1.lower() == "–ø–∞—Å–º—É—Ä–Ω—ã–µ –æ–±–ª–∞–∫–∞":
            image = REPL + 'img/ty4a.jpg'
        elif word1.lower() == "–¥—ã–º":
            image = REPL + 'img/tyman.jpg'
        else:
            image = REPL + 'img/loading-13.gif'
        file = open(image, 'rb')
        bot.send_photo(message.chat.id, file)
    else:
        bot.reply_to(message, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


bot.polling(none_stop=True)
