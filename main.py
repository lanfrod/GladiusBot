import telebot
from telebot import types
import pymorphy2
import sqlite3
from translate import Translator
import passss
import json
import requests
import pole
import mani
# import googlesearch  –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏, —Ö–æ—Å—Ç –µ–µ –Ω–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç
import smtplib
from youtube_search import YoutubeSearch

REPL = ""  # –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ —É–±–µ—Ä–∏—Ç–µ /data/, –¥–ª—è —Ö–æ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /data/
bot = telebot.TeleBot("6392696125:AAETy96cioNjK3XIMm97Tkh_OPBmohbZRqI")  # yeap
API = 'f2d22ddb2ceebe30809c690d48af0e56'
EMOJIES = ['CAACAgIAAxkBAAEGMEhmbxtP12lTH-6Xro0WEd3mZJEtFQACG1IAAowQeUuDLK3SWk2y7TUE',
           'CAACAgIAAxkBAAEGMEZmbxtNsL-KYunOvnr9mfnyumbUWwACRE0AAryBeUt4BrdPKPvaPDUE',
           'CAACAgIAAxkBAAEGMERmbxtMZElajC1Dae8AAdnxGMvAPRsAAn5JAAKVmnlLBwAB0Icc3xgSNQQ',
           'CAACAgIAAxkBAAEGMExmbxtRwtjK64DFT_kRvNoIGhv_UAACT00AAjM_eEv_pagVw7mUjDUE',
           'CAACAgIAAxkBAAEGMEpmbxtQfhrv5f8bzER6tOC40rn-HgAC008AAnCleEtbGaePzX7lnTUE',
           'CAACAgIAAxkBAAEGMEJmbxtMcViNdeWBswJPv5TTFKxN5QACWU8AAuh1eUvd6lZWQIHLSDUE'

NAME = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
        'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
        'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
        'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',
        'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '1', '2', '3',
        '4', '5', '6', '7', '8', '9', '0']
ENGLISH = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
           'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
           'w', 'x', 'y', 'z']
PASSWORD = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
            'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
            'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
            'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',
            'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '1', '2', '3',
            '4', '5', '6', '7', '8', '9', '0', '!', '@', '#', '$',
            '%', '^', '&', '*', '_']
with open(REPL + 'hesh.txt', 'r') as file:
    qq = str(file.read().split(' '))
    hesh = {}
    for i in range(0, len(qq) // 2):
        hesh[qq[i * 2]] = qq[i * 2 + 1]


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–ø–∏—à–∏—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∫–æ–º–∞–Ω–¥')


@bot.message_handler(commands=['help'])
def qwark(message):
    bot.send_message(message.from_user.id, "–í–æ—Ç –≤–∞–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –±–æ—Ç \n "
                                           "/start - –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º \n  "
                                           "/contacts - –∞–∫–∫–∞—É–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ \n"
                                           "/towns - –£–∫–∞–∂–∏—Ç–µ –ª—é–±–∏–º—ã–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã –ª–µ–≥—á–µ —Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É \n"
                                           "/weather - –£–∑–Ω–∞–π—Ç–µ –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ \n"
                                           "/clear - –ù–∞–ø–∏—à–∏, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã \n"
                                           "/recepts - –£–∑–Ω–∞–π—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –±–ª—é–¥–∞! \n"
                                           "/addrecepts - –î–æ–±–∞–≤—å—Ç–µ —Ä–µ—Ü–µ–ø—Ç —Å–≤–æ–µ–≥–æ –±–ª—é–¥–∞ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å"
                                           " –∏–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏! \n"
                                           "/leaderboard - –£–∑–Ω–∞–π—Ç–µ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏  \n"
                                           "/registration - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏ –æ–Ω–ª–∞–π–Ω"
                                           " –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω—É–∂–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ \n"
                                           "/weather - –£–∑–Ω–∞–π—Ç–µ –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ \n "
                                           "/registration - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏ –æ–Ω–ª–∞–π–Ω "
                                           "–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω—É–∂–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ \n"
                                           "/google - –í—ã–≤–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ \n"
                                           "/video - –í—ã–≤–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ –∏–∑ YouTube \n"
                                           "/close - –ó–∞–∫—Ä–æ–π –∫–Ω–æ–ø–∫–∏ \n"
                                           "/game - –ù–∞–ø–∏—à–∏—Ç–µ –∏ –∏–≥—Ä–∞–π—Ç–µ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!")


@bot.message_handler(commands=['close'])
def all_messages(message):
    sq = types.ReplyKeyboardRemove()
    msg = bot.send_message(message.from_user.id, "–ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã", reply_markup=sq)
    bot.delete_message(message.from_user.id, msg.message_id)


@bot.message_handler(commands=['game'])
def game(message):
    global mesid
    with open(REPL + 'game_lobby.txt', 'r') as file:
        s = file.read().split(',')
        toft = ','.join(s)
    qua = s[-1].split('.')
    print(qua)
    id = str(message.from_user.id)
    ro = False
    if id not in toft:
        if len(qua) == 6:
            mesid = bot.send_message(message.chat.id, "–í—ã –∑–∞—à–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å. –û–∂–∏–¥–∞–π—Ç–µ...")
            game_lobby = ",".join(s) + ',' + id + '.' + str(mesid.id)
            with open(REPL + 'game_lobby.txt', 'w') as file:
                file.write(game_lobby)
        elif len(qua) == 2 and qua[-1] != "":
            mesid = bot.send_message(message.chat.id, "–û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞")
            idn1 = s[-1].split(".")
            bot.delete_message(idn1[0], idn1[1])
            s = s[0:-2]
            game_lobby = ','.join(s) + idn1[0] + '.' + id + '.' + "1" + '.' + "?/?/?/?/?/?/?/?/?" + "." + str(mesid.id) + "." + "0"
            with open(REPL + 'game_lobby.txt', 'w') as file:
                file.write(game_lobby)
            play(message)
        else:
            mesid = bot.send_message(message.chat.id, "–í—ã –∑–∞—à–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å. –û–∂–∏–¥–∞–π—Ç–µ...")
            game_lobby = id + '.' + str(mesid.id)
            with open(REPL + 'game_lobby.txt', 'w') as file:
                file.write(game_lobby)
    elif id in toft:
        for i in s:
            if (id in s) and int(i.split(".")[2]) > 1:
                ro = True
        if ro:
            bot.register_next_step_handler(message, play)
        else:
            bot.send_message(message.chat.id, f"–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏, –æ–∂–∏–¥–∞–π—Ç–µ")


def play(message):
    with open(REPL + 'game_lobby.txt', 'r') as file:
        s = file.read().split(',')
    k = -1
    for i in s:
        k += 1
        player1, player2, round_number, bo, mao, em_mes = i.split('.')
        markup = types.InlineKeyboardMarkup()
        emoji = []
        for i in bo.split("/"):
            if i == "?":
                emoji.append("‚ùì")
            elif i == "x":
                emoji.append("‚ùå")
            elif i == "o":
                emoji.append("üÖæÔ∏è")
        spisokmsg = []
        if em_mes == "-1":
            print(mao)
            spisokmsg = mao.split("^")[2:4]
            print(spisokmsg)
        btn1 = types.InlineKeyboardButton(f'{emoji[0]}', callback_data='left_top')
        btn2 = types.InlineKeyboardButton(f'{emoji[1]}', callback_data='mid_top')
        btn3 = types.InlineKeyboardButton(f'{emoji[2]}', callback_data='right_top')
        btn4 = types.InlineKeyboardButton(f'{emoji[3]}', callback_data='left_mid')
        btn5 = types.InlineKeyboardButton(f'{emoji[4]}', callback_data='mid_mid')
        btn6 = types.InlineKeyboardButton(f'{emoji[5]}', callback_data='right_mid')
        btn7 = types.InlineKeyboardButton(f'{emoji[6]}', callback_data='left_bot')
        btn8 = types.InlineKeyboardButton(f'{emoji[7]}', callback_data='mid_bot')
        btn9 = types.InlineKeyboardButton(f'{emoji[8]}', callback_data='right_bot')
        stick1 = types.InlineKeyboardButton(f'Ô∏ª„Éá‚ïê‰∏Ä', callback_data='stick1')
        stick2 = types.InlineKeyboardButton(f'üò¢', callback_data='stick2')
        stick3 = types.InlineKeyboardButton(f'üòë', callback_data='stick3')
        stick4 = types.InlineKeyboardButton(f'‚òïÔ∏è', callback_data='stick4')
        stick5 = types.InlineKeyboardButton(f'‚ù§Ô∏è', callback_data='stick5')
        stick6 = types.InlineKeyboardButton(f'üò®', callback_data='stick6')
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9, stick1, stick2, stick3, stick4, stick5, stick6)
        round_number = int(round_number)
        pole.board(bo)
        if round_number % 2 == 1:
            image = 'res.png'
            file = open('img/' + image, 'rb')
            msg = bot.send_photo(int(player1), file)
            spisokmsg.append(str(msg.id))
            if round_number == 1:
                msg = bot.send_message(int(player1), "–í—ã - –∫—Ä–µ—Å—Ç–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ö–æ–¥–∞.", reply_markup=markup)
                spisokmsg.insert(0, mao)
                spisokmsg.append(str(msg.id))
            else:
                msg = bot.send_message(int(player1), "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ö–æ–¥–∞.", reply_markup=markup)
                spisokmsg.append(str(msg.id))
                spisokmsg.insert(0, mao.split("^")[0])
                spisokmsg.insert(1, mao.split("^")[1])
        if round_number % 2 == 0:
            image = 'res.png'
            file = open('img/' + image, 'rb')
            msg = bot.send_photo(int(player2), file)
            spisokmsg.append(str(msg.id))
            if round_number == 2:
                msg = bot.send_message(int(player2), "–í—ã - –Ω–æ–ª–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ö–æ–¥–∞.", reply_markup=markup)
                spisokmsg.append(str(msg.id))
                spisokmsg.insert(0, mao.split("^")[0])
                spisokmsg.insert(1, mao.split("^")[1])
            else:
                msg = bot.send_message(int(player2), "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ö–æ–¥–∞.", reply_markup=markup)
                spisokmsg.append(str(msg.id))
                spisokmsg.insert(0, mao.split("^")[0])
                spisokmsg.insert(1, mao.split("^")[1])
        i = f'{player1}.{player2}.{round_number}.{bo}.{"^".join(spisokmsg)}.{em_mes}'
        s[k] = i
    game_lobby = ",".join(s)
    with open(REPL + 'game_lobby.txt', 'w') as file:
        file.write(game_lobby)


@bot.callback_query_handler(func=lambda callback: True)
def callback_mes(callback):
    t = 0
    if callback.data == 'left_top':
        t = 1
    elif callback.data == 'mid_top':
        t = 2
    elif callback.data == 'right_top':
        t = 3
    elif callback.data == 'left_mid':
        t = 4
    elif callback.data == 'mid_mid':
        t = 5
    elif callback.data == 'right_mid':
        t = 6
    elif callback.data == 'left_bot':
        t = 7
    elif callback.data == 'mid_bot':
        t = 8
    elif callback.data == 'right_bot':
        t = 9
    elif callback.data == "stick1":
        t = 11
    elif callback.data == "stick2":
        t = 12
    elif callback.data == "stick3":
        t = 13
    elif callback.data == "stick4":
        t = 14
    elif callback.data == "stick5":
        t = 15
    elif callback.data == "stick6":
        t = 16
    elif callback.data == "yeap":
        t = 20
    elif callback.data == "nope":
        t = 19
    move = str(callback.message.chat.id)
    count = 0
    with open(REPL + 'game_lobby.txt', 'r') as file:
        s = file.read().split(',')
    standart_mes_count = 4
    for i in s:
        count += 1
        if move in i:
            li = i.split(".")
            wait = ""
            if li[0] == move and int(li[2]) % 2 == 1:
                wait = li[1]
            elif li[1] == move and int(li[2]) % 2 == 0:
                wait = li[0]
            pol = li[3].split("/")
            msg = li[4].split("^")
            if int(li[5]) > 10:
                qu1 = bot.send_message(int(wait), "–°–æ–ø–µ—Ä–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Å—Ç–∏–∫–µ—Ä")
                qu2 = bot.send_sticker(int(wait), EMOJIES[int(li[5]) - 11])
                qu = str(qu1.id)
                msg.append(qu)
                msg.append(str(qu2.id))
                li[5] = "1"
            if t == 20:
                if li[0] == move and int(li[2]) % 2 == 1:
                    wait = li[1]
                elif li[1] == move and int(li[2]) % 2 == 0:
                    wait = li[0]
                bot.delete_message(int(move), int(msg[-1]))
                bot.delete_message(int(move), int(msg[-2]))
                qu1 = bot.send_message(int(move), "–°—Ç–∏–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Ç–µ–ø–µ—Ä—å —Å–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π —Ö–æ–¥")
                msg.remove(msg[-1])
                msg.remove(msg[-1])
                msg.append(str(qu1.id))
                msg = "^".join(msg)
                pol = "/".join(pol)
                timered = [li[0], li[1], str(li[2]), pol, msg, str(int(li[5]) + 11)]  # 76 # 80
                r = '.'.join(timered)
                s[count - 1] = r
                game_lobby = ','.join(s)
                with open(REPL + 'game_lobby.txt', 'w') as file:
                    file.write(game_lobby)
            elif t == 19:
                bot.delete_message(int(move), int(msg[-1]))
                bot.delete_message(int(move), int(msg[-2]))
                msg.remove(msg[-1])
                msg.remove(msg[-2])
                msg = "^".join(msg)
                pol = "/".join(pol)
                timered = [li[0], li[1], str(li[2]), pol, msg, "0"]  # 76 # 80
                r = '.'.join(timered)
                s[count - 1] = r
                game_lobby = ','.join(s)
                with open(REPL + 'game_lobby.txt', 'w') as file:
                    file.write(game_lobby)
            elif t > 10:
                markup = types.InlineKeyboardMarkup(row_width=3)
                btn1 = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='yeap')
                btn2 = types.InlineKeyboardButton("–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å", callback_data='nope')
                markup.add(btn1, btn2)
                qu1 = bot.send_message(int(move), "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞–∫–æ–π —ç–º–æ–¥–∑–∏, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫—É? –≠–º–æ–¥–∑–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å"
                                                  "1 —Ä–∞–∑ –∑–∞ —Ö–æ–¥", reply_markup=markup)
                qu2 = bot.send_sticker(int(move), EMOJIES[t-11])
                qu = str(qu1.id) + "^" + str(qu2.id)
                msg.append(qu)
                msg = "^".join(msg)
                pol = "/".join(pol)
                timered = [li[0], li[1], str(li[2]), pol, msg, str(t - 11)]  # 76 # 80
                r = '.'.join(timered)
                s[count - 1] = r
                game_lobby = ','.join(s)
                with open(REPL + 'game_lobby.txt', 'w') as file:
                    file.write(game_lobby)
            else:
                if pol[t - 1] == "?":
                    if li[0] == move and int(li[2]) % 2 == 1:
                        pol[t - 1] = "x"
                        pol = "/".join(pol)
                        wait = li[1]
                    elif li[1] == move and int(li[2]) % 2 == 0:
                        pol[t - 1] = "o"
                        pol = "/".join(pol)
                        wait = li[0]
                    if li[2] == "1":
                        bot.delete_message(wait, int(msg[0]))
                        bot.delete_message(move, int(msg[1]))
                        bot.delete_message(move, int(msg[2]))
                        for x in range(3):
                            msg.remove(msg[0])
                    if li[2] != "1":
                        bot.delete_message(wait, int(msg[0]))
                        bot.delete_message(move, int(msg[1]))
                        bot.delete_message(move, int(msg[2]))
                        bot.delete_message(move, int(msg[3]))
                        for x in range(4):
                            msg.remove(msg[0])
                    if li[5] == "-1":
                        bot.delete_message(move, int(msg[-1]))
                        bot.delete_message(move, int(msg[-2]))
                        li[5] = "0"
                        msg = []
                    elif li[5] == "1":
                        bot.delete_message(move,int(msg[-3]))
                        msg.remove(msg[-3])
                        li[5] = "-1"
                    # bot.delete_message(int(move), int(li[4]) + 2)  # 75 # 78 # 82
                    # bot.delete_message(int(move), int(li[4]) + 1)  # 74 # 77 #81
                    # if int(li[2]) == 1:
                    #     bot.delete_message(int(wait), int(li[4]))  # 73
                    # elif int(li[2]) != 1:
                    #     bot.delete_message(int(wait), int(li[4]))  # 76
                    #     bot.delete_message(int(move), int(li[4]) + 3)  # 79
                    if (pol[0] == "o" and pol[2] == "o" and pol[4] == "o" or
                            pol[6] == "o" and pol[8] == "o" and pol[10] == "o" or
                            pol[12] == "o" and pol[14] == "o" and pol[16] == "o" or
                            pol[0] == "o" and pol[6] == "o" and pol[12] == "o" or
                            pol[2] == "o" and pol[8] == "o" and pol[14] == "o" or
                            pol[4] == "o" and pol[10] == "o" and pol[16] == "o" or
                            pol[0] == "o" and pol[8] == "o" and pol[16] == "o" or
                            pol[12] == "o" and pol[8] == "o" and pol[4] == "o"):
                        s.remove(i)
                        game_lobby = ','.join(s)
                        with open(REPL + 'game_lobby.txt', 'w') as file:
                            file.write(game_lobby)
                        bot.send_message(int(wait), "–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ –æ")
                        bot.send_message(int(move), "–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ –æ")
                        conn = sqlite3.connect(REPL + "users.db")
                        cur = conn.cursor()
                        tabl = cur.execute('''SELECT * FROM userinfo WHERE tg_id = ?''',
                                           (int(move),)).fetchone()
                        if tabl:
                            ss = cur.execute('''SELECT * FROM leaderboard WHERE nickname = ?''',
                                             (tabl[1],)).fetchone()
                            if not ss:
                                cur.execute('''INSERT INTO leaderboard (nickname, wins) VALUES (?, ?)''',
                                            (tabl[1], 1))
                            if ss:
                                cur.execute('''INSERT INTO leaderboard (nickname, wins) VALUES (?, ?)''',
                                            (tabl[1], ss[2] + 1))
                            conn.commit()
                            conn.close()
                    elif (pol[0] == "x" and pol[2] == "x" and pol[4] == "x" or
                          pol[6] == "x" and pol[8] == "x" and pol[10] == "x" or
                          pol[12] == "x" and pol[14] == "x" and pol[16] == "x" or
                          pol[0] == "x" and pol[6] == "x" and pol[12] == "x" or
                          pol[2] == "x" and pol[8] == "x" and pol[14] == "x" or
                          pol[4] == "x" and pol[10] == "x" and pol[16] == "x" or
                          pol[0] == "x" and pol[8] == "x" and pol[16] == "x" or
                          pol[12] == "x" and pol[8] == "x" and pol[4] == "x"):
                        s.remove(i)
                        game_lobby = ','.join(s)
                        with open(REPL + 'game_lobby.txt', 'w') as file:
                            file.write(game_lobby)
                        bot.send_message(int(wait), "–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ x")
                        bot.send_message(int(move), "–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ x")
                        conn = sqlite3.connect(REPL + "users.db")
                        cur = conn.cursor()
                        tabl = cur.execute('''SELECT * FROM userinfo WHERE tg_id = ?''',
                                           (int(move),)).fetchone()
                        if tabl:
                            ss = cur.execute('''SELECT * FROM leaderboard WHERE nickname = ?''',
                                             (tabl[1],)).fetchone()
                            if not ss:
                                cur.execute('''INSERT INTO leaderboard (nickname, wins) VALUES (?, ?)''',
                                            (tabl[1], 1))
                            if ss:
                                cur.execute('''INSERT INTO leaderboard (nickname, wins) VALUES (?, ?)''',
                                            (tabl[1], ss[2] + 1))
                            conn.commit()
                            conn.close()
                    elif int(li[2]) == 9:
                        bot.send_message(int(wait), "–Ω–∏—á—å—è")
                        bot.send_message(int(move), "–Ω–∏—á—å—è")
                    else:
                        qu1 = bot.send_message(int(move), "–í–∞—à —Ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞")
                        qu2 = bot.send_message(int(wait), "–°–æ–ø–µ—Ä–Ω–∏–∫ —Å–¥–µ–ª–∞–ª —Ö–æ–¥")
                        if li[5] == "-1":
                            msg.insert(0, str(qu1.id))
                        else:
                            msg.append(str(qu1.id))
                        msg.append(str(qu2.id))
                        timered = [li[0], li[1], str(int(li[2]) + 1), pol, "^".join(msg), li[5]]  # 76 # 80
                        r = '.'.join(timered)
                        s[count - 1] = r
                        game_lobby = ','.join(s)
                        with open(REPL + 'game_lobby.txt', 'w') as file:
                            file.write(game_lobby)
                        play(int(wait))
                else:
                    if li[0] == move:
                        wait = li[1]
                    elif li[1] == move:
                        wait = li[0]
                    qu1 = bot.send_message(int(wait), "–í–∞—à —Ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞")
                    qu2 = bot.send_message(int(move), "–°–æ–ø–µ—Ä–Ω–∏–∫ —Å–¥–µ–ª–∞–ª —Ö–æ–¥")
                    qu = str(qu1.id) + "^" + str(qu2.id)
                    bot.delete_message(wait, int(msg[0]))
                    bot.delete_message(move, int(msg[1]))
                    bot.delete_message(move, int(msg[2]))
                    bot.delete_message(move, int(msg[3]))
                    pol = "/".join(pol)
                    timered = [li[0], li[1], str(int(li[2])), pol, str(qu), li[5]]
                    r = '.'.join(timered)
                    s[count - 1] = r
                    game_lobby = ','.join(s)
                    with open(REPL + 'game_lobby.txt', 'w') as file:
                        file.write(game_lobby)
                    play(int(move))


# @bot.message_handler(commands=['google'])
# def google(message):
#   query = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å")
#   bot.register_next_step_handler(query, tests_google)
# def tests_google(message):
#    if message.text.strip().lower() == "/clear":
#        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
#        bot.clear_step_handler(message)                            ************–ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏********
#        all_messages(message)
#    else:
#        name = message.text.strip()
#        for i in googlesearch.search(name, lang='russian', num_results=2):
#            bot.send_message(message.chat.id, i)


@bot.message_handler(commands=['video'])
def video(message):
    query = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å")
    bot.register_next_step_handler(query, tests_video)


def tests_video(message):
    if message.text.strip().lower() == "/clear":
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.clear_step_handler(message)
        all_messages(message)
    else:
        name = message.text.strip()
        results = YoutubeSearch(name).to_dict()
        for i in range(3):
            bot.send_message(message.chat.id, f"https://www.youtube.com{results[i]['url_suffix']}")


@bot.message_handler(commands=['admin'])
def listorian(message):
    global iddus
    print(message)
    conn = sqlite3.connect(REPL + 'users.db')
    cur = conn.cursor()
    sos1 = cur.execute('''SELECT * FROM userinfo WHERE tg_id = ? AND admin > ?''', (message.from_user.id, 0, )).fetchone()
    print(sos1)
    if sos1:
        bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É')
        iddus = sos1[0]
        bot.register_next_step_handler(message, autorization)
    else:
        bot.send_message(message.chat.id, f'–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—Ö–æ–¥–∞.')


def autorization(message):

    sip = message.text
    conn = sqlite3.connect(REPL + 'users.db')
    cur = conn.cursor()
    if message.text.lower() == "–≤—ã—Ö–æ–¥":
        bot.clear_step_handler(message)
        all_messages(message)
    sos1 = cur.execute('''SELECT * FROM passwords WHERE id = ?''', (iddus, )).fetchone()
    aut = True
    with open(REPL + 'hesh.txt', 'r') as file:
        k = file.read().split(" ")
        heshing = {}
        for i in range(len(k) // 2):
            heshing[k[i * 2]] = k[i * 2 + 1]
        hesh_password = ""
        for i in sip:
            if i not in PASSWORD:
                aut = False
            else:
                hesh_password += heshing[i]
    print(hesh_password,)
    if hesh_password == sos1[2] and aut:
        global markup_admin
        sos2 = cur.execute('''SELECT * FROM userinfo WHERE tg_id = ? AND admin > ?''',
                           (message.from_user.id, 0,)).fetchone()
        markup_admin = types.ReplyKeyboardMarkup(row_width=1)
        markup_admin.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–∞—é—â–∏—Ö"))
        markup_admin.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"))
        if sos2[-2] == 2:
            markup_admin.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤"))
            markup_admin.add(types.InlineKeyboardButton("–ó–∞—è–≤–∫–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é"))
        markup_admin.add(types.InlineKeyboardButton("–í—ã—Ö–æ–¥"))
        bot.send_message(message.chat.id, f'–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω', reply_markup=markup_admin)
        bot.send_message(message.chat.id, f'----------------------------WARNING----------------------------\n–ù–∞—Ö–æ–¥—è—Å—å'
                                          f' –≤ —Å–∏—Å—Ç–µ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ '
                                          f'–æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ \n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–ø–∏—à–∏—Ç–µ: "–Ω–∞–∑–∞–¥"'
                                          f'\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø–∏—à–∏—Ç–µ: "–≤—ã—Ö–æ–¥" –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å '
                                          f'—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π')
        bot.register_next_step_handler(message, list_blinks)
    else:
        bot.send_message(message.chat.id, f'–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ')
        bot.clear_step_handler(message)
        all_messages(message)


def list_blinks(message):
    conn = sqlite3.connect(REPL + 'users.db')
    cur = conn.cursor()
    sos2 = cur.execute('''SELECT * FROM userinfo WHERE tg_id = ? AND admin > ?''',
                       (message.from_user.id, 0,)).fetchone()
    with open(REPL + "game_lobby.txt", "r") as file:
        k = file.read().split(",")
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–∞—é—â–∏—Ö":
        sec = ""
        if k == [""]:
            bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä")
            bot.register_next_step_handler(message, list_blinks)
        else:
            for i in k:
                ii = i.split(".")
                sec += f"–ü–∞—Ä–∞ {k.index(i) + 1}: id1:{ii[0]}, id2:{ii[1]}, turn:{ii[2]}, board:{ii[3]}, sticker_info:{ii[4]}\n\n"
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥"))
            bot.send_message(message.chat.id, sec)
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=markup)
            bot.register_next_step_handler(message, list_players)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤":
        sos1 = cur.execute('''SELECT * FROM leaderboard ORDER BY wins DESC''').fetchall()
        print(sos1)
        sec = ""
        if sos1 == [""]:
            bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤", reply_markup=markup_admin)
            bot.register_next_step_handler(message, list_blinks)
        else:
            for i in sos1:
                print(i)
                sec += f"{sos1.index(i) + 1}: id:{i[0]}, nickname:{i[1]}, wins:{i[2]}\n\n"
                print(sec)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥"))
            bot.send_message(message.chat.id, sec)
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=markup)
            bot.register_next_step_handler(message, list_leaderbord)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤" and sos2[-2] == 2:
        sos1 = cur.execute('''SELECT * FROM userinfo''').fetchall()
        print(sos1)
        sec = ""
        for i in sos1:
            print(i)
            sec += f"{sos1.index(i) + 1}: id:{i[0]}, login:{i[1]}, email:{i[2]}, nickname:{i[3]}, tg_id:{i[4]}, " \
                   f"admin:{i[5]}, towns_weather:{i[6]}\n\n"
            print(sec)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, sec)
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=markup)
        bot.register_next_step_handler(message, list_accounts)
    elif message.text == "–ó–∞—è–≤–∫–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é" and sos2[-2] == 2:
        sos1 = cur.execute('''SELECT * FROM request''').fetchone()
        if sos1 == None:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            bot.register_next_step_handler(message, list_blinks)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            markup.add(types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å"))
            markup.add(types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å"))
            bot.send_message(message.chat.id, f"–ù–∏–∫: {sos1[1]} \n tg_id: {sos1[2]} \n"
                                          f"–í–æ–∑—Ä–∞—Å—Ç: {sos1[3]} \n –ü—Ä–∏—á–∏–Ω–∞: {sos1[-1]}", reply_markup=markup)
            bot.register_next_step_handler(message, list_tickets)
    elif message.text.lower() == "–≤—ã—Ö–æ–¥":
        bot.clear_step_handler(message)
        all_messages(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        bot.register_next_step_handler(message, list_blinks)
    conn.close()


def list_players(message):
    ss = message.text
    print(ss)
    with open(REPL + "game_lobby.txt", "r") as file:
        k = file.read().split(",")
    if message.text.lower() == "–≤—ã—Ö–æ–¥":
        bot.clear_step_handler(message)
        all_messages(message)
    elif message.text.lower() == "–Ω–∞–∑–∞–¥":
        all_messages(message)
        bot.register_next_step_handler(message, list_blinks)
        bot.send_message(message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=markup_admin)
    elif ss.isdigit():
        print(1, "da")
        if int(ss) > 0 and int(ss) < len(k) + 1:
            k.remove(k[int(ss) - 1])
            k = ",".join(k)
            with open(REPL + 'game_lobby.txt', 'w') as file:
                file.write(k)
            bot.send_message(message.chat.id, "–ü–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup_admin)
            bot.register_next_step_handler(message, list_blinks)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            bot.register_next_step_handler(message, list_players)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        bot.register_next_step_handler(message, list_players)


def list_leaderbord(message):
    ss = message.text
    print(ss)
    conn = sqlite3.connect(REPL + 'users.db')
    cur = conn.cursor()
    k = cur.execute('''SELECT * FROM leaderboard''').fetchall()
    if message.text.lower() == "–≤—ã—Ö–æ–¥":
        bot.clear_step_handler(message)
        all_messages(message)
    elif message.text.lower() == "–Ω–∞–∑–∞–¥":
        all_messages(message)
        bot.register_next_step_handler(message, list_blinks)
        bot.send_message(message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=markup_admin)
    elif ss.isdigit():
        if int(ss) > 0 and int(ss) < len(k) + 1:
            cur.execute('''DELETE FROM leaderboard WHERE id = ?''', (k[int(ss) - 1][0],))
            conn.commit()
            bot.send_message(message.chat.id, "–õ–∏–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup_admin)
            bot.register_next_step_handler(message, list_blinks)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            bot.register_next_step_handler(message, list_leaderbord)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        bot.register_next_step_handler(message, list_leaderbord)


def list_accounts(message):
    ss = message.text
    print(ss)
    conn = sqlite3.connect(REPL + 'users.db')
    cur = conn.cursor()
    k = cur.execute('''SELECT * FROM userinfo''').fetchall()
    if message.text.lower() == "–≤—ã—Ö–æ–¥":
        bot.clear_step_handler(message)
        all_messages(message)
    elif message.text.lower() == "–Ω–∞–∑–∞–¥":
        all_messages(message)
        bot.register_next_step_handler(message, list_blinks)
        bot.send_message(message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=markup_admin)
    elif ss.isdigit():
        if int(ss) > 0 and int(ss) < len(k) + 1:
            global accounteee
            markup = types.ReplyKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ü–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∞"))
            markup.add(types.InlineKeyboardButton("–ü–æ–Ω–∏–∑–∏—Ç—å –∞–¥–º–∏–Ω–∞"))
            markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
            markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥"))
            all_messages(message)
            accounteee = ss
            print(accounteee)
            if k[int(ss) - 1][-3] == message.chat.id:
                all_messages(message)
                bot.send_message(message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–≤–æ–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º",
                                 reply_markup=markup_admin)
                bot.register_next_step_handler(message, list_blinks)
            else:
                bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
                bot.register_next_step_handler(message, rasp_punkt)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            bot.register_next_step_handler(message, list_accounts)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        bot.register_next_step_handler(message, list_accounts)

def rasp_punkt(message):
    if message.text.lower() == "–≤—ã—Ö–æ–¥":
        bot.clear_step_handler(message)
        all_messages(message)
    elif message.text.lower() == "–Ω–∞–∑–∞–¥":
        all_messages(message)
        bot.register_next_step_handler(message, list_blinks)
        bot.send_message(message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=markup_admin)
    elif message.text.lower() == "–ø–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∞":
        all_messages(message)
        accounts_redact(message, 1)
    elif message.text.lower() == "–ø–æ–Ω–∏–∑–∏—Ç—å –∞–¥–º–∏–Ω–∞":
        all_messages(message)
        accounts_redact(message, 2)
    elif message.text.lower() == "—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        all_messages(message)
        accounts_delete(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        bot.register_next_step_handler(message, rasp_punkt)


def accounts_redact(message, rep):
    conn = sqlite3.connect(REPL + 'users.db')
    cur = conn.cursor()
    k = cur.execute('''SELECT * FROM userinfo''').fetchall()
    if rep == 1:
        proverb = cur.execute('''SELECT * FROM userinfo WHERE tg_id = ?''', (k[int(accounteee) - 1][-3],)).fetchone()
        print(proverb)
        print(k)
        print(k[int(accounteee) - 1][2])
        if proverb[-2] == 2:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –ø–æ–≤—ã—à–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
                                              ". –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                             reply_markup=markup_admin)
            bot.register_next_step_handler(message, list_blinks)
        if proverb[-2] < 2:
            cur.execute('''DELETE FROM userinfo WHERE tg_id = ?''', (proverb[-3],))
            cur.execute('''INSERT INTO userinfo (id, login, email, nickname, tg_id, admin, 
                towns_weather) VALUES (?, ?, ?, ?, ?, ?, ?)''',
                        (proverb[0], proverb[1], proverb[2], proverb[3], proverb[4], proverb[-2] + 1, proverb[-1],))
            conn.commit()
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω –Ω–∞ 1 —É—Ä–æ–≤–µ–Ω—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup_admin)
            bot.register_next_step_handler(message, list_blinks)
    elif rep == 2:
        proverb = cur.execute('''SELECT * FROM userinfo WHERE tg_id = ?''', (k[int(accounteee) - 1][-3],)).fetchone()
        print(proverb)
        print(k)
        print(k[int(accounteee) - 1][2])
        if proverb[-2] == 0:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è, –ø–æ–Ω–∏–∂–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ"
                                              ". –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                             reply_markup=markup_admin)
            bot.register_next_step_handler(message, list_blinks)
        if proverb[-2] != 0:
            cur.execute('''DELETE FROM userinfo WHERE tg_id = ?''', (proverb[-3],))
            cur.execute('''INSERT INTO userinfo (id, login, email, nickname, tg_id, admin, 
                towns_weather) VALUES (?, ?, ?, ?, ?, ?, ?)''',
                        (proverb[0], proverb[1], proverb[2], proverb[3], proverb[4], proverb[-2] - 1, proverb[-1],))
            conn.commit()
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω –Ω–∞ 1 —É—Ä–æ–≤–µ–Ω—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup_admin)
            bot.register_next_step_handler(message, list_blinks)


def accounts_delete(message):
    conn = sqlite3.connect(REPL + 'users.db')
    cur = conn.cursor()
    k = cur.execute('''SELECT * FROM userinfo''').fetchall()
    if message.text.lower() == "–≤—ã—Ö–æ–¥":
        bot.clear_step_handler(message)
        all_messages(message)
    elif message.text.lower() == "–Ω–∞–∑–∞–¥":
        all_messages(message)
        bot.register_next_step_handler(message, list_blinks)
        bot.send_message(message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=markup_admin)
    else:
        proverb = cur.execute('''SELECT * FROM userinfo WHERE tg_id = ?''', (k[int(accounteee) - 1][-3],)).fetchone()
        print(proverb)
        print(k)
        print(k[int(accounteee) - 1][2])
        cur.execute('''DELETE FROM userinfo WHERE tg_id = ?''', (proverb[-3],))
        conn.commit()
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup_admin)
        bot.register_next_step_handler(message, list_blinks)


def list_tickets(message):
    ss = message.text
    print(ss)
    all_messages(message)
    conn = sqlite3.connect(REPL + 'users.db')
    cur = conn.cursor()
    k = cur.execute('''SELECT * FROM request''').fetchone()
    print(11111111111111111111, k[1])
    if message.text.lower() == "–≤—ã—Ö–æ–¥":
        bot.clear_step_handler(message)
        all_messages(message)
    elif message.text.lower() == "–Ω–∞–∑–∞–¥":
        all_messages(message)
        bot.register_next_step_handler(message, list_blinks)
        bot.send_message(message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=markup_admin)
    elif ss.lower() == "–ø—Ä–∏–Ω—è—Ç—å":
        cur.execute('''DELETE FROM request WHERE id = ?''', (k[0],))
        print(k[2])
        proverb = cur.execute('''SELECT * FROM userinfo WHERE tg_id = ?''', (k[2],)).fetchone()
        cur.execute('''DELETE FROM userinfo WHERE tg_id = ?''', (proverb[-3],))
        cur.execute('''INSERT INTO userinfo (id, login, email, nickname, tg_id, admin, 
            towns_weather) VALUES (?, ?, ?, ?, ?, ?, ?)''',
                    (proverb[0], proverb[1], proverb[2], proverb[3], proverb[4], 1, proverb[-1], ))
        conn.commit()
        conn.commit()
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –Ω–∞ –ø–æ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup_admin)
        bot.send_message(proverb[4], "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ –ø–æ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ó–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–≤–æ–∏—Ö –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è—Ö "
                                     "–≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—è–º. –ò—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥–µ /contacts. "
                                     "–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω –º–µ–Ω—é - /list")
        bot.register_next_step_handler(message, list_blinks)
    elif ss.lower() == '–æ—Ç–∫–ª–æ–Ω–∏—Ç—å':
        print(k[1])
        cur.execute('''DELETE FROM request WHERE tg_id = ?''', (k[2],))
        conn.commit()
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                         reply_markup=markup_admin)
        bot.register_next_step_handler(message, list_blinks)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        bot.register_next_step_handler(message, list_leaderbord)


@bot.message_handler(commands=["ticket"])
def ticket(message):
    conn = sqlite3.connect(REPL + 'users.db')
    cur = conn.cursor()
    sos2 = cur.execute('''SELECT * FROM userinfo WHERE tg_id = ?''',
                       (message.from_user.id,)).fetchone()
    sos3 = cur.execute('''SELECT * FROM request WHERE tg_id = ?''',
                       (message.from_user.id,)).fetchone()
    if not sos2 or sos2[5] > 0:
        bot.send_message(message.chat.id, "–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –Ω–µ —è–≤–ª—è—Ç—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        bot.clear_step_handler(message)
    elif sos3:
        bot.send_message(message.chat.id,"–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞")
        bot.clear_step_handler(message)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
        bot.register_next_step_handler(message, old)


def old(message):
    global old
    old = message.text
    print(old)
    bot.send_message(message.chat.id, "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –≤—ã –¥–æ–ª–∂–Ω—ã —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º?")
    bot.register_next_step_handler(message, prichina)


def prichina(message):
    nickname = message.from_user.first_name
    tgid = message.from_user.id
    conn = sqlite3.connect(REPL + 'users.db')
    cur = conn.cursor()
    prichina = message.text
    print(1, prichina)
    print(2, old)
    cur.execute("INSERT INTO request (nickname, tg_id, old, prichina) VALUES ('%s', '%s', '%s', '%s')" % (nickname, tgid, old, prichina,))
    conn.commit()
    bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")


# @bot.message_handler(commands=['contacts'])
# def site(message):
#     markup = types.InlineKeyboardMarkup()
#     markup.add(types.InlineKeyboardButton('lanfrod', url='https://vk.com/lanfrod'))
#     markup.add(types.InlineKeyboardButton('intestine1', url='https://vk.com/intestine1'))
#     bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, –≤–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤', reply_markup=markup)


@bot.message_handler(commands=['registration'])
def registration(message):
    conn = sqlite3.connect(REPL + "users.db")
    cur = conn.cursor()
    sos2 = cur.execute('''SELECT * FROM userinfo WHERE tg_id = ?''',
                       (message.from_user.id,)).fetchone()
    if message.text.lower() == '/registration':
        if sos2:
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
            bot.clear_step_handler(message)
        else:
            bot.send_message(message.chat.id, f'{message.from_user.username.capitalize()}, '
                                              f'—á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'
                                              f' –Ω–∞–ø–∏—à–∏ –∂–µ–ª–∞–µ–º—ã–π login. –û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω '
                                              f'–∫–∞–∫ –Ω–∏–∫–Ω–µ–π–º. –ù–∏–∫ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å '
                                              f'–∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞, —Ü–∏—Ñ—Ä')
            bot.register_next_step_handler(message, user_name)
    if message.text.strip().lower() == "/clear":
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.clear_step_handler(message)
        all_messages(message)


def user_name(message):
    conn = sqlite3.connect(REPL + 'users.db')
    cur = conn.cursor()
    proxod = True
    global name
    name = message.text.strip()
    for i in name:
        if i not in NAME:
            proxod = False
    if proxod:
        proverb = cur.execute('''SELECT * FROM passwords WHERE login = ?''', (name,)).fetchall()
        conn.close()
        if not proverb:
            bot.send_message(message.chat.id,
                             '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å. –û–Ω –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞, —Ü–∏—Ñ—Ä '
                             '—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–∏–∂–Ω–µ–≥–æ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.')
            bot.register_next_step_handler(message, user_pass)
        else:
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω')
            bot.register_next_step_handler(message, user_name)
    else:
        if message.text.strip().lower() == "/clear":
            bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            bot.clear_step_handler(message)
            all_messages(message)
        else:
            bot.send_message(message.chat.id, '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω')
            bot.register_next_step_handler(message, user_name)


def user_pass(message):
    global password
    global hesh_password
    b = True
    password = message.text.strip()
    for i in password:
        if i not in PASSWORD:
            b = False
    if message.text.strip().lower() == "/clear":
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.clear_step_handler(message)
        all_messages(message)
    elif b:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏')
        with open(REPL + 'hesh.txt', 'r') as file:
            k = file.read().split(" ")
            heshing = {}
            for i in range(len(k) // 2):
                heshing[k[i * 2]] = k[i * 2 + 1]
            hesh_password = ""
            for i in password:
                hesh_password += heshing[i]
        bot.register_next_step_handler(message, user_email)
    else:
        bot.send_message(message.chat.id, '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–∞—Ä–æ–ª—å. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å')
        bot.register_next_step_handler(message, user_pass)


def user_email(message):
    global email
    email = message.text.strip()
    nickname = message.from_user.first_name
    tgid = message.from_user.id
    conn = sqlite3.connect(REPL + 'users.db')
    cur = conn.cursor()
    if message.text.strip().lower() == "/clear":
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.clear_step_handler(message)
        all_messages(message)
    else:
        try:
            sos1 = cur.execute('''SELECT * FROM userinfo WHERE email = ?''', (email,)).fetchall()
            if sos1:
                raise Exception()
            mani.send_email(email, 'Registration',
                            f'{nickname}, —ç—Ç–æ –∫–∞–ø—á–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞–ø—á–∏'
                            f' –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º')

            up = mani.pat()
            res = ''  # –∫–∞–ø—á–∞ –¥–ª–∏–Ω–Ω–∞—è(–Ω–∞—Å–ª–∞–∏–≤–∞–µ—Ç—Å—è –≤–µ—Ä–æ—è—Ç–Ω–æ), —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã/–≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–µ–π—Å—Ç–≤–∏—è
            for i in up:
                res += i
            cur.execute('''INSERT INTO captchatab (nickname, captcha) VALUES (?, ?)''', (tgid, res,))
            bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞–ø—á–∏')
            conn.commit()
            conn.close()
            bot.register_next_step_handler(message, cap)
        except Exception:  # –æ—à–∏–±–∫–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ—á—Ç–æ–π
            bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—á—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É –µ—â—ë —Ä–∞–∑')
            bot.register_next_step_handler(message, user_email)

        except smtplib.SMTPRecipientsRefused:
            bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—á—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É –µ—â—ë —Ä–∞–∑')
            bot.register_next_step_handler(message, user_email)


def cap(message):
    global mistake
    captcha = message.text.strip()
    if message.text.strip().lower() == "/clear":
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.clear_step_handler(message)
        all_messages(message)
    else:
        if captcha != mani.pat():
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞–ø—á–∏')
            bot.register_next_step_handler(message, cap)
            nickname = message.from_user.first_name
            tgid = message.from_user.id
            conn = sqlite3.connect(REPL + 'users.db')
            cur = conn.cursor()
            mani.send_email(email, 'Registration',
                            f'{nickname}, —ç—Ç–æ –∫–∞–ø—á–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞–ø—á–∏'
                            f' –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º')
            up = mani.pat()
            res = ''  # –∫–∞–ø—á–∞ –¥–ª–∏–Ω–Ω–∞—è(–Ω–∞—Å–ª–∞–∏–≤–∞–µ—Ç—Å—è –≤–µ—Ä–æ—è—Ç–Ω–æ), —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã/–≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–µ–π—Å—Ç–≤–∏—è
            for i in up:
                res += i
            cur.execute('''INSERT INTO captchatab (nickname, captcha) VALUES (?, ?)''', (tgid, res,))
            bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –Ω–æ–≤–æ–π –∫–∞–ø—á–∏')
        elif captcha == mani.pat():
            bot.send_message(message.chat.id, '–ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
            conn = sqlite3.connect(REPL + 'users.db')
            cur = conn.cursor()
            nickname = message.from_user.first_name
            tg_id = message.from_user.id
            cur.execute("INSERT INTO passwords (login, pass) VALUES ('%s', '%s')" % (name, hesh_password))
            cur.execute("INSERT INTO userinfo (login, email, nickname, tg_id) VALUES ('%s', '%s', '%s', '%s')" % (
                name, email, nickname, tg_id))
            conn.commit()
            conn.close()
            markup = telebot.types.InlineKeyboardMarkup()
            bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', reply_markup=markup)


@bot.message_handler(commands=['leaderboard'])
def leaderboard(message):
    conn = sqlite3.connect(REPL + "users.db")
    cur = conn.cursor()
    num = cur.execute('''SELECT * FROM leaderboard ORDER BY wins DESC''').fetchall()
    s = '–ù–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤: \n'
    for i in range(0, len(num)):
        s = f'{s} {num[i][1]} \t {num[i][-1]} \n'
    bot.send_message(message.chat.id, s)


@bot.message_handler(commands=['towns'])
def favourite(message):
    if message.text.strip().lower() == "/clear":
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.clear_step_handler(message)
        all_messages(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        btn1 = types.InlineKeyboardButton(f'–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥')
        btn2 = types.InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥')
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –≤–∞—à–∏–º —Å–ø–∏—Å–∫–æ–º –ª—é–±–∏–º—ã—Ö –≥–æ—Ä–æ–¥–æ–≤', reply_markup=markup)
        bot.register_next_step_handler(message, towny)


def towny(message):
    if message.text.strip().lower() == "/clear":
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.clear_step_handler(message)
        all_messages(message)
    else:
        all_messages(message)
        tgid = message.from_user.id
        conn = sqlite3.connect(REPL + 'users.db')
        cur = conn.cursor()
        if cur.execute('''SELECT * FROM userinfo WHERE tg_id = ?''', (tgid,)).fetchone():
            proverb = cur.execute('''SELECT towns_weather FROM userinfo WHERE tg_id = ?''', (tgid,)).fetchone()
            if not proverb[0]:
                bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥')
                bot.register_next_step_handler(message, addit)
            elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥" and len(proverb[0].split(",")) < 3:
                bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥')
                bot.register_next_step_handler(message, addit)
            elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥" and len(proverb[0].split(",")) >= 3:
                bot.send_message(message.chat.id, '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–æ—Ä–æ–¥–æ–≤(3)')
                bot.clear_step_handler(message)
                all_messages(message)
            elif proverb and message.text == "–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥" and len(proverb) >= 1 and 0 not in proverb:
                proverb = list(cur.execute('''SELECT * FROM userinfo WHERE tg_id = ?''', (tgid,)).fetchone())
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                for i in proverb[-1].split(','):
                    markup.add(types.InlineKeyboardButton(f'{i}'))
                bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥', reply_markup=markup)
                bot.register_next_step_handler(message, deleteit)
            elif proverb and message.text == "–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥" and len(proverb) < 1:
                bot.send_message(message.chat.id, '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
                bot.clear_step_handler(message)
                all_messages(message)
            else:
                bot.send_message(message.chat.id, '–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ')
                bot.clear_step_handler(message)
                all_messages(message)
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
            bot.clear_step_handler(message)
            all_messages(message)


def addit(message):
    if message.text.strip().lower() == "/clear":
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.clear_step_handler(message)
        all_messages(message)
    else:
        tgid = message.from_user.id
        conn = sqlite3.connect(REPL + 'users.db')
        cur = conn.cursor()
        city = message.text
        s = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city.lower()}&appid={API}&units=metric')
        proverb = list(cur.execute('''SELECT * FROM userinfo WHERE tg_id = ?''', (tgid,)).fetchone())
        if s.status_code == 200 and (city not in str(proverb[-1])):
            if proverb[-1]:
                check = proverb[-1].split(",")
                check.append(city.capitalize())
                proverb[-1] = ",".join(check)
            elif not proverb[-1]:
                proverb[-1] = city.capitalize()
            cur.execute('''DELETE FROM userinfo WHERE tg_id = ?''', (tgid,))
            cur.execute('''INSERT INTO userinfo (id, login, email, nickname, tg_id, admin, 
        towns_weather) VALUES (?, ?, ?, ?, ?, ?, ?)''',
                        (proverb[0], proverb[1], proverb[2], proverb[3], proverb[4], proverb[5], proverb[-1], ))
            conn.commit()
            bot.send_message(message.chat.id, f'–ì–æ—Ä–æ–¥ {city.capitalize()} –¥–æ–±–∞–≤–ª–µ–Ω')
            bot.clear_step_handler(message)
            all_messages(message)
        elif city in str(proverb[-1]):
            bot.send_message(message.chat.id, f'–ì–æ—Ä–æ–¥ {city.capitalize()} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ')
            bot.clear_step_handler(message)
            all_messages(message)
        elif s.status_code != 200:
            bot.send_message(message.chat.id, f'–ì–æ—Ä–æ–¥ {city.capitalize()} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            bot.clear_step_handler(message)
            all_messages(message)


def deleteit(message):
    if message.text.strip().lower() == "/clear":
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.clear_step_handler(message)
        all_messages(message)
    else:
        tgid = message.from_user.id
        conn = sqlite3.connect(REPL + 'users.db')
        cur = conn.cursor()
        proverb = list(cur.execute('''SELECT * FROM userinfo WHERE tg_id = ?''', (tgid,)).fetchone())
        bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞')
        city = message.text
        s = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city.lower()}&appid={API}&units=metric')
        if s.status_code == 200 and city in proverb[-1]:
            if proverb[-1]:
                check = proverb[-1].split(",")
                check.remove(city.capitalize())
                proverb[-1] = ",".join(check)
            cur.execute('''DELETE FROM userinfo WHERE tg_id = ?''', (tgid,))
            cur.execute('''INSERT INTO userinfo (id, login, email, nickname, tg_id, admin, 
        towns_weather) VALUES (?, ?, ?, ?, ?, ?, ?)''',
                        (proverb[0], proverb[1], proverb[2], proverb[3], proverb[4], proverb[5], proverb[-1], ))
            conn.commit()
            bot.send_message(message.chat.id, f'–ì–æ—Ä–æ–¥ {city.capitalize()} —É–¥–∞–ª—ë–Ω')
            bot.clear_step_handler(message)
            all_messages(message)
        else:
            bot.send_message(message.chat.id, f'–ì–æ—Ä–æ–¥ {city.capitalize()} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ')
            bot.clear_step_handler(message)
            all_messages(message)


@bot.message_handler(commands=['weather'])
def get_weather(message):
    if message.text.strip().lower() == "/clear":
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.clear_step_handler(message)
        all_messages(message)
    else:
        conn = sqlite3.connect(REPL + "users.db")
        cur = conn.cursor()
        tgid = message.from_user.id
        proverb = list(cur.execute('''SELECT * FROM userinfo WHERE tg_id = ?''', (tgid,)).fetchone())
        if len(proverb) >= 1 and proverb[-1] != 0:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=len(proverb[-1].split(",")))
            print(proverb[-1].split(","))
            for i in proverb[-1].split(","):
                markup.add(types.InlineKeyboardButton(f'{i}'))
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø–æ–≥–æ–¥—É', reply_markup=markup)
            bot.register_next_step_handler(message, answer)
        else:
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø–æ–≥–æ–¥—É')
            bot.register_next_step_handler(message, answer)


def answer(message):
    if message.text.strip().lower() == "/clear":
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.clear_step_handler(message)
        all_messages(message)
    else:
        city = message.text.strip().lower()
        eng = False
        for i in city:
            if i in ENGLISH:
                eng = True
        if eng:
            city_parse = city
        if not eng:
            morph = pymorphy2.MorphAnalyzer()
            city_parse = morph.parse(city)[0].inflect({"loct"}).word
        s = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API}&units=metric')
        if s.status_code == 200:
            data = json.loads(s.text)
            if data["weather"][0]["description"] == "weather condition":
                word1 = "–º–∞–ª–æ –æ–±–ª–∞–∫–æ–≤"
            elif data["weather"][0]["description"] == "overcast clouds":
                word1 = "–ø–∞—Å–º—É—Ä–Ω—ã–µ –æ–±–ª–∞–∫–∞"
            else:
                word1 = Translator(from_lang="english", to_lang="russian").translate(data["weather"][0]["description"])
            bot.reply_to(message, f'–°–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞ –≤ {city_parse.capitalize()}: {word1.lower()}. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞:'
                                  f' {data["main"]["temp"]}¬∞C')
            if word1.lower() == "—è—Å–Ω–æ":
                image = REPL + 'img/sunny3.png'
                file = open(image, 'rb')
                bot.send_photo(message.chat.id, file)
            elif word1.lower() == "–º–∞–ª–æ –æ–±–ª–∞–∫–æ–≤":
                image = REPL + 'img/obla.png'
                file = open(image, 'rb')
                bot.send_photo(message.chat.id, file)
            elif word1.lower() == "–æ–±–ª–∞—á–Ω–æ":
                image = REPL + 'img/obl.png'
                file = open(image, 'rb')
                bot.send_photo(message.chat.id, file)
            elif word1.lower() == "–ø–∞—Å–º—É—Ä–Ω—ã–µ –æ–±–ª–∞–∫–∞":
                image = REPL + 'img/ty4a.jpg'
                file = open(image, 'rb')
                bot.send_photo(message.chat.id, file)
            elif word1.lower() == "–¥—ã–º":
                image = REPL + 'img/tyman.jpg'
                file = open(image, 'rb')
                bot.send_photo(message.chat.id, file)
            all_messages(message)
        else:
            bot.reply_to(message, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            all_messages(message)


bot.polling(none_stop=True)
